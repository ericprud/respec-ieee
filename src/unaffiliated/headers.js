// @ts-check
// Module unaffiliated/headers
// Generate the headers material based on the provided configuration.
// CONFIGURATION
//  - specStatus: the short code for the specification's maturity level or type (required)
//  - shortName: the small name that is used in https://specs.fairdatapoint.org/ in published specs (required)
//  - editors: an array of people editing the document (at least one is required). People
//      are defined using:
//          - name: the person's name (required)
//          - url: URI for the person's home page
//          - company: the person's company
//          - companyURL: the URI for the person's company
//          - mailto: the person's email
//          - note: a note on the person (e.g. former editor)
//  - authors: an array of people who are contributing authors of the document.
//  - formerEditors: an array of people that had earlier edited the document but no longer edit.
//  - subtitle: a subtitle for the specification
//  - publishDate: the date to use for the publication, default to document.lastModified, and
//      failing that to now. The format is YYYY-MM-DD or a Date object.
//  - previousPublishDate: the date on which the previous version was published.
//  - previousMaturity: the specStatus of the previous version
//  - errata: the URI of the errata document, if any
//  - alternateFormats: a list of alternate formats for the document, each of which being
//      defined by:
//          - uri: the URI to the alternate
//          - label: a label for the alternate
//          - lang: optional language
//          - type: optional MIME type
//  - logos: a list of logos to use instead of the W3C logo, each of which being defined by:
//          - src: the URI to the logo (target of <img src=>)
//          - alt: alternate text for the image (<img alt=>), defaults to "Logo" or "Logo 1", "Logo 2", ...
//            if src is not specified, this is the text of the "logo"
//          - height: optional height of the logo (<img height=>)
//          - width: optional width of the logo (<img width=>)
//          - url: the URI to the organization represented by the logo (target of <a href=>)
//          - id: optional id for the logo, permits custom CSS (wraps logo in <span id=>)
//          - each logo element must specify either src or alt
//  - edDraftURI: the URI of the Editor's Draft for this document, if any. Required if
//      specStatus is set to "ED".
//  - copyrightStart: the year from which the copyright starts running
//  - prevED: the URI of the previous Editor's Draft if it has moved
//  - prevRecShortname: the short name of the previous Recommendation, if the name has changed
//  - prevRecURI: the URI of the previous specification if not directly generated from
//    prevRecShortname.
//  - thisVersion: the URI to the dated current version of the specification. ONLY ever use this for CG/BG
//      documents, for all others it is autogenerated.
//  - latestVersion: the URI to the latest version of the specification.
//  - prevVersion: the URI to the previous (dated) version of the specification. ONLY ever use this for CG/BG
//      documents, for all others it is autogenerated.
//  - otherLinks: an array of other links that you might want in the header (e.g., link github, twitter, etc).
//         Example of usage: [{key: "foo", href:"https://b"}, {key: "bar", href:"https://"}].
//         Allowed values are:
//          - key: the key for the <dt> (e.g., "Bug Tracker"). Required.
//          - value: The value that will appear in the <dd> (e.g., "GitHub"). Optional.
//          - href: a URL for the value (e.g., "https://foo.com/issues"). Optional.
//          - class: a string representing CSS classes. Optional.
//  - license: can be one of the following
//      - "cc-by", which is experimentally available in some groups (but likely to be phased out).
//          Note that this is a dual licensing regime.
//      - "document", which is the old, but still available, document license.
//      - "dual", dual license.
//      - "cc0", an extremely permissive license. It is only recommended if you are working on a document that is
//          intended to be pushed to the WHATWG.
import {
  ISODate,
  codedJoinAnd,
  codedJoinOr,
  concatDate,
  docLink,
  htmlJoinAnd,
  norm,
  showError,
  showWarning,
} from "../core/utils.js";
import headersTmpl from "./templates/headers.js";
import { html } from "../core/import-maps.js";
import { pub } from "../core/pubsubhub.js";

export const name = "w3c/headers";

/**
 * Resolves against https://www.w3.org.
 * @param {string} href
 */
function resolveUrl(href, base) {
  return new URL(href, base).href;
}

const status2maturity = {
  LS: "WD",
  LD: "WD",
  FPWD: "WD",
  "Member-SUBM": "SUBM",
};

export const status2text = {
  DNOTE: "Group Draft Note",
  NOTE: "Group Note",
  STMT: "Statement",
  "Member-SUBM": "Member Submission",
  MO: "Member-Only Document",
  ED: "Editor's Draft",
  LS: "Living Standard",
  LD: "Living Document",
  FPWD: "First Public Working Draft",
  WD: "Working Draft",
  CR: "Candidate Recommendation",
  CRD: "Candidate Recommendation",
  PR: "Proposed Recommendation",
  PER: "Proposed Edited Recommendation",
  REC: "Recommendation",
  DISC: "Discontinued Draft",
  RSCND: "Rescinded Recommendation",
  DRY: "Draft Registry",
  CRYD: "Candidate Registry",
  CRY: "Candidate Registry",
  RY: "Registry",
  unofficial: "Unofficial Draft",
  UD: "Unofficial Draft",
  base: "",
  finding: "TAG Finding",
  "draft-finding": "Draft TAG Finding",
  "editor-draft-finding": "Draft TAG Finding",
  "CG-DRAFT": "Draft Community Group Report",
  "CG-FINAL": "Final Community Group Report",
  "BG-DRAFT": "Draft Business Group Report",
  "BG-FINAL": "Final Business Group Report",
};
const status2long = {
  ...status2text,
  CR: "Candidate Recommendation Snapshot",
  CRD: "Candidate Recommendation Draft",
  CRY: "Candidate Registry Snapshot",
  CRYD: "Candidate Registry Draft",
};
export const status2track = {
  DNOTE: "Note",
  NOTE: "Note",
  STMT: "Note",
  "WG-NOTE": "Note",
  "IG-NOTE": "Note",
  FPWD: "Recommendation",
  WD: "Recommendation",
  CR: "Recommendation",
  CRD: "Recommendation",
  PR: "Recommendation",
  REC: "Recommendation",
  DISC: "Recommendation",
  RSCND: "Recommendation",
  DRY: "Registry",
  CRYD: "Registry",
  CRY: "Registry",
  RY: "Registry",
};
export const recTrackStatus = [
  "CR",
  "CRD",
  "DISC",
  "FPWD",
  "PER",
  "PR",
  "REC",
  "RSCND",
  "WD",
];
export const registryTrackStatus = ["DRY", "CRY", "CRYD", "RY"];
export const tagStatus = ["draft-finding", "finding", "editor-draft-finding"];
export const cgStatus = ["CG-DRAFT", "CG-FINAL"];
export const bgStatus = ["BG-DRAFT", "BG-FINAL"];
export const cgbgStatus = [...cgStatus, ...bgStatus];
export const trStatus = [
  ...recTrackStatus,
  ...registryTrackStatus,
];
/** @type {Map<string, LicenseInfo>} */
export const licenses = new Map([
  [
    "cc0",
    {
      name: "Creative Commons 0 Public Domain Dedication",
      short: "CC0",
      url: "https://creativecommons.org/publicdomain/zero/1.0/",
    },
  ],
  [
    "w3c-software",
    {
      name: "W3C Software Notice and License",
      short: "W3C Software",
      url: "https://www.w3.org/Consortium/Legal/2002/copyright-software-20021231",
    },
  ],
  [
    "w3c-software-doc",
    {
      name: "W3C Software and Document Notice and License",
      short: "permissive document license",
      url: "https://www.w3.org/Consortium/Legal/2023/software-license",
    },
  ],
  [
    "cc-by",
    {
      name: "Creative Commons Attribution 4.0 International Public License",
      short: "CC-BY",
      url: "https://creativecommons.org/licenses/by/4.0/legalcode",
    },
  ],
  [
    "document",
    {
      name: "W3C Document License",
      short: "document use",
      url: "https://www.w3.org/Consortium/Legal/copyright-documents",
    },
  ],
  [
    "dual",
    {
      name: "W3C Dual License",
      short: "dual license",
      url: "https://www.w3.org/Consortium/Legal/2013/copyright-documents-dual.html",
    },
  ],
  [
    undefined,
    {
      name: "unlicensed",
      url: null,
      short: "UNLICENSED",
    },
  ],
]);

const patentPolicies = ["PP2017", "PP2020"];

/**
 * @param {*} conf
 * @param {string} prop
 * @param {string | number | Date} fallbackDate
 */
function validateDateAndRecover(conf, prop, fallbackDate = new Date()) {
  const date = conf[prop] ? new Date(conf[prop]) : new Date(fallbackDate);
  // if date is valid
  if (Number.isFinite(date.valueOf())) {
    const formattedDate = ISODate.format(date);
    return new Date(formattedDate);
  }
  const msg = docLink`${prop} is not a valid date: "${conf[prop]}". Expected format 'YYYY-MM-DD'.`;
  showError(msg, name);
  return new Date(ISODate.format(new Date()));
}

export async function run(conf) {
  conf.isBasic = conf.specStatus === "base";
  conf.isCGBG = cgbgStatus.includes(conf.specStatus);
  conf.isCGFinal = conf.isCGBG && conf.specStatus.endsWith("G-FINAL");
  conf.isCR = conf.specStatus === "CR" || conf.specStatus === "CRD";
  conf.isCRDraft = conf.specStatus === "CRD";
  conf.isCRY = conf.specStatus === "CRY" || conf.specStatus === "CRYD";
  conf.isEd = conf.specStatus === "ED";
  conf.isUnofficial = conf.specStatus === "unofficial";
  conf.longStatus = status2long[conf.specStatus];
  conf.textStatus = status2text[conf.specStatus];
  conf.showPreviousVersion = false;

  if (!conf.shortName) {
    const msg = docLink`The ${"[shortName]"} configuration option is required for this kind of document.`;
    const hint = docLink`Please set ${"[shortName]"} to a short name for the specification.`;
    showError(msg, name, { hint });
  }

  conf.publishDate = validateDateAndRecover(
    conf,
    "publishDate",
    document.lastModified
  );
  conf.publishYear = conf.publishDate.getUTCFullYear();
  if (conf.modificationDate) {
    conf.modificationDate = validateDateAndRecover(
      conf,
      "modificationDate",
      document.lastModified
    );
  }

  if (conf.isEd && !conf.edDraftURI) {
    const msg = docLink`Editor's Drafts should set ${"[edDraftURI]"} configuration option.`;
    const hint = docLink`Please set ${"[edDraftURI]"} to the URL of the Editor's Draft. Alternatively, use the set ${"[github]"} option, which automatically sets it for you.`;
    showWarning(msg, name, { hint });
  }

  const pubSpace = '/docs';
  if (pubSpace && !conf.thisVersion) {
    const maturity = status2maturity[conf.specStatus] || conf.specStatus;
    const { shortName, publishDate } = conf;
    const date = concatDate(publishDate);
    const docVersion = `${maturity}-${shortName}-${date}`;
    const year = [...trStatus, "Member-SUBM"].includes(conf.specStatus)
      ? `${publishDate.getUTCFullYear()}/`
      : "";
    conf.thisVersion = resolveUrl(`${pubSpace}/${year}${docVersion}/`, conf.base);
  }

  if (conf.isEd) conf.thisVersion = conf.edDraftURI;
  if (conf.latestVersion !== null) {
    conf.latestVersion = conf.latestVersion
      ? resolveUrl(conf.latestVersion, conf.base)
      : resolveUrl(`${pubSpace}/${conf.shortName}/`, conf.base);
  }

  const latestPath = `${pubSpace}/${conf.shortName}`;
  if (conf.previousPublishDate) {
    if (!conf.previousMaturity) {
      const msg = docLink`${"[`previousPublishDate`]"} is set, but missing ${"[`previousMaturity`]"}.`;
      showError(msg, name);
    }

    conf.previousPublishDate = validateDateAndRecover(
      conf,
      "previousPublishDate"
    );

    const prevMaturity =
      status2maturity[conf.previousMaturity] ?? conf.previousMaturity;
    if (conf.isCGBG || conf.isBasic) {
      conf.prevVersion = conf.prevVersion || "";
    } else {
      const year = conf.previousPublishDate.getUTCFullYear();
      const { shortName } = conf;
      const date = concatDate(conf.previousPublishDate);
      conf.prevVersion = resolveUrl(
        `${pubSpace}/${year}/${prevMaturity}-${shortName}-${date}/`,
        conf.base
      );
    }
  }

  // Move any editors with retiredDate to formerEditors.
  for (let i = 0; i < conf.editors.length; i++) {
    const editor = conf.editors[i];
    if ("retiredDate" in editor) {
      conf.formerEditors.push(editor);
      conf.editors.splice(i--, 1);
    }
  }

  if (conf.editors.length === 0) {
    const msg = "At least one editor is required.";
    const hint = docLink`Add one or more editors using the ${"[editors]"} configuration option.`;
    showError(msg, name, { hint });
  }

  if (conf.alternateFormats?.some(({ uri, label }) => !uri || !label)) {
    const msg = docLink`Every ${"[`alternateFormats`]"} entry must have a \`uri\` and a \`label\`.`;
    showError(msg, name);
  }
  if (conf.copyrightStart == conf.publishYear) conf.copyrightStart = "";
  if (!conf.licenseInfo) {
    showWarning('missing licenseInfo, using Apache 2 License', name, {hint: '"licenseInfo": { name: "My License", url: "http://a.example/license" }'});
    conf.licenseInfo = {
      name: "Apache 2 License",
      url: "https://www.apache.org/licenses/LICENSE-2.0",
    }
  }
  conf.dashDate = ISODate.format(conf.publishDate);
  conf.publishISODate = conf.publishDate.toISOString();
  conf.shortISODate = ISODate.format(conf.publishDate);
  // configuration done - yay!

  const options = {
    get multipleAlternates() {
      return conf.alternateFormats && conf.alternateFormats.length > 1;
    },
    get alternatesHTML() {
      return (
        conf.alternateFormats &&
        htmlJoinAnd(
          // We need to pass a string here...
          conf.alternateFormats.map(({ label }) => label),
          (_, i) => {
            const alt = conf.alternateFormats[i];
            return html`<a
              rel="alternate"
              href="${alt.uri}"
              hreflang="${alt?.lang ?? null}"
              type="${alt?.type ?? null}"
              >${alt.label}</a
            >`;
          }
        )
      );
    },
  };

  // insert into document
  const header = headersTmpl(conf, options);
  document.body.prepend(header);
  document.body.classList.add("h-entry");

  if (conf.noRecTrack && recTrackStatus.includes(conf.specStatus)) {
    const msg = docLink`Document configured as ${"[noRecTrack]"}, but its status ("${
      conf.specStatus
    }") puts it on the W3C Rec Track.`;
    const notAllowed = codedJoinOr(recTrackStatus, { quotes: true });
    const hint = `Status **can't** be any of: ${notAllowed}.`;
    showError(msg, name, { hint });
  }

  // Requested by https://github.com/w3c/respec/issues/504
  // Makes a record of a few auto-generated things.
  pub("amend-user-config", {
    publishISODate: conf.publishISODate,
    generatedSubtitle: norm(
      document.getElementById("w3c-state")?.textContent ?? ""
    ),
  });
}
